CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(glakkeclock)

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# Arch
IF(NOT DEFINED ${KKE_ARCH})
	IF (CMAKE_SIZEOF_VOID_P MATCHES "8")
		SET(KKE_ARCH "x86_64" CACHE STRING "ARCH")
	ELSEIF(CMAKE_SIZEOF_VOID_P MATCHES "4")
		SET(KKE_ARCH "x86" CACHE STRING "ARCH")
	ELSE()
		SET(KKE_ARCH "x86_64" CACHE STRING "ARCH")
		MESSAGE(WARNING "Could not define ARCH, using ${KKE_ARCH}.")
	ENDIF()
ELSEIF(NOT KKE_ARCH MATCHES "x86_64" AND NOT KKE_ARCH MATCHES "x86")
		MESSAGE(FATAL_ERROR "Invalid KKE_ARCH (${KKE_ARCH}), use x86_64 or x86")
ENDIF()

IF(KKE_ARCH MATCHES "x86_64")
  ADD_DEFINITIONS("-m64")
ELSEIF(${KKE_ARCH} MATCHES "x86")
  ADD_DEFINITIONS("-m32")
ENDIF()

MESSAGE(STATUS "Using ARCH: ${KKE_ARCH}")

# Version
SET(KKE_VERSION "1.0-rc2" CACHE STRING "VERSION")
MESSAGE(STATUS "Version: ${KKE_VERSION}")

# OS
IF(UNIX)
  ADD_DEFINITIONS("-DLINUX")
ELSEIF(WIN32)
  ADD_DEFINITIONS("-DWINDOWS")
ELSE(WIN32)
  MESSAGE(FATAL_ERROR "Operating System ${CMAKE_SYSTEM_NAME} not (officially) supported.")
ENDIF()

FIND_PACKAGE(ADL REQUIRED)
IF (ADL_DLL_LOC)
	MESSAGE(STATUS "Using ADL Location: ${ADL_DLL_LOC}")
	SET(ADL_LIBRARY ${ADL_DLL_LOC})
ENDIF()

ADD_DEFINITIONS("-Wall -DADLLOC='\"${ADL_LIBRARY}\"' -DVERSION='\"${KKE_VERSION}\"'")

SET(CMAKE_CXX_FLAGS_DEBUG "-DDEBUG -g")
SET(CMAKE_CXX_FLAGS_RELEASE "-DRELEASE -O3")
SET(CMAKE_CXX_FLAGS_PROFILING "-pg -O0 -c")
SET(KKE_BIN glakkeclock CACHE STRING "Filename")

IF (NOT WIN32)
	FIND_LIBRARY(
	GLIBC

	NAMES
	dl)
ELSE()
	MESSAGE(STATUS "Applying static linking for Windows")
	SET(CMAKE_EXE_LINKER_FLAGS 
	"${CMAKE_EXE_LINKER_FLAGS} -static-libstdc++ -static-libgcc")
ENDIF()

ADD_EXECUTABLE(
${KKE_BIN}

src/Debug/Logger.cpp

src/IO/ArgParser.cpp
src/IO/Argument.cpp
#src/ADL.cpp

src/main.cpp
src/kkeADL.cpp
src/GlakkeClock.cpp
src/Device.cpp
)

INCLUDE_DIRECTORIES(
${CMAKE_SOURCE_DIR}/src
${ADL_INCLUDE_DIR})

TARGET_LINK_LIBRARIES(
${KKE_BIN}
${GLIBC})

IF (NOT WIN32)
	INSTALL(
	DIRECTORY
	"${CMAKE_SOURCE_DIR}/man"
	DESTINATION share)
ENDIF()

INSTALL(
TARGETS 
${KKE_BIN}
RUNTIME DESTINATION bin)